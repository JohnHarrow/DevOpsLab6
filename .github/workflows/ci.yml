name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # User Service Job
  user-service:
    name: 🐳 User Service
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install
        working-directory: ./user-service

      - name: Build Docker image
        run: docker build -t user-service ./user-service

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push Docker image to Docker Hub
        run: |
          docker tag user-service ${{ secrets.DOCKER_USERNAME }}/user-service:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/user-service:latest

  # Video Service Job
  video-service:
    name: 🎥 Video Service
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install
        working-directory: ./video-service

      - name: Build Docker image
        run: docker build -t video-service ./video-service

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push Docker image to Docker Hub
        run: |
          docker tag video-service ${{ secrets.DOCKER_USERNAME }}/video-service:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/video-service:latest

  # API Gateway Job
  api-gateway:
    name: 🚪 API Gateway
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install
        working-directory: ./api-gateway

      - name: Build Docker image
        run: docker build -t api-gateway ./api-gateway

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push Docker image to Docker Hub
        run: |
          docker tag api-gateway ${{ secrets.DOCKER_USERNAME }}/api-gateway:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/api-gateway:latest

  # Frontend Service Job
  frontend:
    name: 💻 Frontend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install
        working-directory: ./frontend

      - name: Build Docker image
        run: docker build -t frontend ./frontend

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push Docker image to Docker Hub
        run: |
          docker tag frontend ${{ secrets.DOCKER_USERNAME }}/frontend:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/frontend:latest

  # Deploy to EC2 (Docker Pull & Run)
  deploy-to-ec2:
    name: Deploy Docker Containers to EC2
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up SSH Key for EC2 access
        run: |
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > /tmp/id_rsa
          chmod 600 /tmp/id_rsa

      - name: SSH into EC2 and Deploy Docker Containers
        run: |
          ssh -i /tmp/id_rsa -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            # Stop existing containers (if running)
            docker stop user-service || true
            docker stop video-service || true
            docker stop api-gateway || true
            docker stop frontend || true

            # Remove old containers (if stopped)
            docker rm user-service || true
            docker rm video-service || true
            docker rm api-gateway || true
            docker rm frontend || true

            # Pull latest images from Docker Hub
            docker pull ${{ secrets.DOCKER_USERNAME }}/user-service:latest
            docker pull ${{ secrets.DOCKER_USERNAME }}/video-service:latest
            docker pull ${{ secrets.DOCKER_USERNAME }}/api-gateway:latest
            docker pull ${{ secrets.DOCKER_USERNAME }}/frontend:latest

            # Run new containers
            docker run -d --name user-service -p 3000:3000 ${{ secrets.DOCKER_USERNAME }}/user-service:latest
            docker run -d --name video-service -p 3001:3001 ${{ secrets.DOCKER_USERNAME }}/video-service:latest
            docker run -d --name api-gateway -p 3002:3002 ${{ secrets.DOCKER_USERNAME }}/api-gateway:latest
            docker run -d --name frontend -p 3003:3000 ${{ secrets.DOCKER_USERNAME }}/frontend:latest
          EOF